#!/usr/bin/env zsh

emulate -L zsh
setopt no_aliases err_exit no_unset extended_glob pipe_fail warn_create_global ksh_arrays

local -r num="(-<0-$((1<<31))>|<0-$((1<<31-1))>)"

local -a mem
IFS=, read -rA mem
[[ -z "${(@)mem:#$~num}" ]]
(( ${#mem[@]} > 2 ))

local -i p

function at() {
  (( $1 >= 0 && $1 < ${#mem[@]} ))
  unsetopt err_exit
  return ${mem[$1]}
}
functions -M at 1

function store() {
  local -i pos=at(p++)
  (( pos >= 0 && pos < ${#mem[@]} ))
  [[ $1 == $~num ]]
  mem[pos]=$1
}

mem[1,2]=(12 2)

while true; do
  case $(( at(p++) )); in
    99) break;;
    1) store $(( at(at(p++)) + at(at(p++)) ));;
    2) store $(( at(at(p++)) * at(at(p++)) ));;
    *) return 1;;
  esac
done

echo -E - ${mem[0]}
