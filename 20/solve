#!/usr/bin/env zsh

emulate -L zsh
setopt no_aliases err_exit no_unset extended_glob pipe_fail warn_create_global

local -ri bet=200
local ax=() ay=()  # asteroid coordinates

# Read input data (map of all of asteroids).
() {
  local line
  read -r line
  local -i width=$#line x y
  for ((y = 1; ; ++y)); do
    for x in {1..$width}; do
      [[ $line[x] != '.' ]] || continue
      [[ $line[x] == '#' ]]
      ax+=$x
      ay+=$y
    done
    read -r line || break
    (( $#line == width ))
  done
}

(( $#ax == $#ay && $#ax > bet ))

local -i sx sy  # station coordinates

# Find the optimal location for the observation station.
() {
  local -i s a v vc
  for s in {1..$#ax}; do
    local vx=() vy=()
    for a in {1..$#ax}; do
      (( a != s )) || continue
      local -i x=$((ax[a] - ax[s]))
      local -i y=$((ay[a] - ay[s]))
      for ((v = 1; v <= $#vx; ++v)); do
        (( x * vy[v] != y * vx[v] || x * vx[v] < 0 || y * vy[v] < 0 )) || break
      done
      (( v > $#vx )) || continue
      vx+=$x
      vy+=$y
    done
    (( $#vx > vc )) || continue
    vc=$#vx
    sx=ax[s]
    sy=ay[s]
  done
}

(( sx > 0 && sx <= $#ax && sy > 0 && sy <= $#ay ))

local ad=()  # squared distance from the station to asteroids

# Translate asteroid coordinates so that station is at (0, 0) and compute distances.
() {
  local -i i
  for i in {1..$#ax}; do
    (( ax[i] -= sx, 1 ))
    (( ay[i] -= sy, 1 ))
    ad+=$((ax[i] * ax[i] + ay[i] * ay[i]))
  done
}

(( $#ad == $#ax ))

# cmp(i, j) <  0  => the giant laser will reach asteroid i before j.
# cmp(i, j) >  0  => the giant laser will reach asteroid i after j.
# rot(i, j) == 0 => one of the asteroids is behind the other or they are identical.
function cmp() {
  local -i i=$1 j=$2 res
  if (( (ax[i] < 0) != (ax[j] < 0) )); then
    res=$(( ax[i] < 0 ? 1 : -1 ))
  elif (( ax[i] == 0 && ax[j] == 0 )); then
    res=$(( ay[i] * ay[j] >= 0 ? 0 : ay[i] < 0 ? -1 : 1 ))
  else
    local -i c=$(( ax[j] * ay[i] - ax[i] * ay[j] ))
    res=$(( c == 0 ? 0 : c < 0 ? -1 : 1 ))
  fi
  unsetopt err_exit
  return res
}
functions -M cmp 2

# lt(i, j) == the giant laser will reach asteroid i before j
#             OR
#             it'll reach them at the same time (angle wise) AND i is closer than j
#
# N.B.: This is strict weak order.
function lt() {
  local -i c=$((cmp($1, $2)))
  local -i res=$((c < 0 || (c == 0 && ad[$1] < ad[$2])))
  unsetopt err_exit
  return res
}
functions -M lt 2

# Sort asteroids with respect to `lt`.
() {
  local tmp
  local -i i j
  for ((i = 1; i <= $#ax; ++i)); do
    for ((j = i + 1; j <= $#ax; ++j)); do
      if (( lt(j, i) )); then
        tmp=$ax[i]; ax[i]=$ax[j]; ax[j]=$tmp
        tmp=$ay[i]; ay[i]=$ay[j]; ay[j]=$tmp
        tmp=$ad[i]; ad[i]=$ad[j]; ad[j]=$tmp
      fi
    done
  done
}

(( ax[1] == 0 && ay[1] == 0 && ad[1] == 0 ))
shift 1 ax ay ad

# Vaporize!
() {
  local -i num_destroyed i
  while true; do
    (( $#ax ))
    local -i d=0
    local ax2=() ay2=() ad2=()  # asteroids surviving the current rotation
    for i in {1..$#ax}; do
      if (( d && cmp(i, d) == 0 )); then
        ax2+=$ax[i]
        ay2+=$ay[i]
        ad2+=$ad[i]
      elif (( ++num_destroyed == bet )); then
        echo -E - $((100 * (ax[i] + sx - 1) + (ay[i] + sy - 1)))
        exit
      else
        d=i
      fi
    done
    ax=($ax2)
    ay=($ay2)
    ad=($ad2)
  done
}
