#!/usr/bin/env zsh

emulate -L zsh
setopt no_aliases err_exit no_unset extended_glob pipe_fail warn_create_global

local -ri m=119315717514047
local -ri n=101741582076661
local -ri start=2020

(( $+commands[tac] ))

function norm() {
  local -i res="$1 < 0 ? $1 + m : $1"
  (( res >= 0 && res < m ))
  unsetopt err_exit
  return res
}
functions -M norm 1

function add() {
  local -i res=$((($1 + $2) % m))
  unsetopt err_exit
  return 'norm(res)'
}
functions -M add 2

() {
  local f g unit
  for f g unit in mul add 0 pow mul 1; do
    functions[$f]='
      local -i a=$1 b=$2 res='$unit'
      (( a >= 0 && b >= 0 ))
      while (( b )); do
        (( b & 1 == 0 )) || res="'$g'(res, a)"
        a="'$g'(a, a)"
        (( b >>= 1, 1 ))
      done
      unsetopt err_exit
      return res'
    functions -M $f 2
  done
}

local -i k=1 b=0

() {
  local line match mbegin mend
  tac | while read -r line; do
    if [[ $line == 'deal into new stack' ]]; then
      (( k = norm(-k), b = add(-b, -1), 1 ))
    elif [[ $line == (#b)'cut '((-|)<->) ]]; then
      (( b = add(b, match[1]), 1 ))
    elif [[ $line == (#b)'deal with increment '(<1->) ]]; then
      local -i x='pow(add(0, match[1]), m-2)'
      (( k = mul(k, x), b = mul(b, x), 1 ))
    else
      exit 1
    fi
  done
}

local -i x='mul(b, pow(add(k, -1), m-2))'
echo -E - $((add(mul(add(x, start), pow(k, n)), -x)))
