#!/usr/bin/env zsh

emulate -L zsh
setopt no_aliases err_exit no_unset extended_glob pipe_fail warn_create_global

zmodload zsh/datetime

function ascii-encode() {
  local c
  while read -rku0 c && [[ -n $c ]]; do
    echo $((#c))
  done
}

function ascii-decode() {
  local line
  while read -r line; do
    [[ $line == <1-127> ]]
    printf \\$(([##8]line))
  done
  echo done
}

local program="$(<&0)"

function start() {
  (( !${(%):-%j} )) || kill -- $! 2>/dev/null || true
  coproc ascii-encode | ./icc $program | ascii-decode
}

function receive() {
  local line
  while true; do
    read -rpt3 line
    [[ $line != (#b)$~1 ]] || break
  done
}

local -rA reverse=(
  'east' 'west'
  'west' 'east'
  'south' 'north'
  'north' 'south')

local -a bad=()
local -i survived
local -a visited items checkpoint

function take() {
  local back=$1 room=$2 item=$3 line
  (( !bad[(I)$item] )) || return 0
  print -rp -- "take $item"
  print -rp -- $back
  local -F deadline='EPOCHREALTIME + 3'
  while true; do
    local -F tmout='deadline - EPOCHREALTIME'
    if (( tmout <= 0 )) || ! read -rpt $tmout line || [[ $line == ("== $room =="|done) ]] ; then
      bad+=$item
      survived=0
      break
    elif [[ $line == '== '*' ==' ]]; then
      print -rpl -- $reverse[$back]
      receive "\=\= ${(b)room} \=\="
      items+=$item
      break
    fi
  done
}

function explore() {
  local line match mbegin mend back=${reverse[${*[-1]-}]-}
  receive '\=\= (*) \=\='
  local room=$match[1]

  if (( !visited[(I)$room] )); then
    visited+=$room

    receive 'Doors here lead:'
    local -a doors
    while true; do
      read -rpt3 line
      [[ $line == (#b)'- '(*) ]] || break
      [[ $match[1] == $back ]] || doors+=$match[1]
    done

    if [[ $room == 'Pressure-Sensitive Floor' ]]; then
      receive '*(get in by typing ([0-9]#)|(lighter|heavier) than the detected)*'
      if [[ -n $match[2] ]]; then
        echo -E - $match[2]
        exit
      fi
      (( $# ))
      checkpoint=($*)
      return
    fi

    receive '(Items here:)|(Command?)'
    if [[ -n $match[1] ]]; then
      [[ -n $back ]]
      while true; do
        read -rpt3 line
        [[ $line == (#b)'- '(*) ]] || break
        take $back $room $match[1]
        (( survived )) || return 0
      done
    fi

    local door
    for door in $doors; do
      print -rp -- $door
      explore $* $door
      (( survived )) || return 0
      receive "\=\= ${(b)room} \=\="
    done
  fi

  if [[ -n $back ]]; then
    print -rp -- $back
  fi
}

while (( ! survived )); do
  survived=1
  items=()
  visited=()
  start
  explore
done

(( $#checkpoint > 1 && $#items > 0 ))
print -rpl -- $checkpoint[1,-2]

function popcount() {
  local -i a=$1 res
  while (( a )); do
    (( a >>= 1, ++res ))
  done
  unsetopt err_exit
  return res
}
functions -M popcount 1

() {
  local -A checked
  local match mbegin mend k v
  local -i mask i inventory=$((1 << $#items - 1))

  while true; do
    local -i diff=$((1 << ($#items+1) - 1))
    for mask in {0..$((1 << $#items - 1))}; do
      [[ ! -v "checked[$mask]" ]] || continue
      for k v in ${(kv)checked}; do
        if { (( mask & k == k ))    && [[ $v == lighter ]] } ||
           { (( mask & k == mask )) && [[ $v == heavier ]] }; then
          checked[$mask]=$v
          break
        fi
      done
      [[ ! -v "checked[$mask]" ]] || continue
      (( popcount(inventory ^ mask) >= popcount(diff) )) || diff='inventory ^ mask'
    done
    (( popcount(diff) <= $#items ))

    for i in {1..$#items}; do
      (( diff & (1 << (i-1)) )) || continue
      if (( inventory & (1 << (i-1)) )); then
        print -rp -- "drop $items[i]"
      else
        print -rp -- "take $items[i]"
      fi
    done
    (( inventory ^= diff, 1 ))

    print -rp -- $checkpoint[-1]
    receive '*(get in by typing ([0-9]#)|(lighter|heavier) than the detected)*'
    if [[ -n $match[2] ]]; then
      echo -E - $match[2]
      return
    fi
    checked[$inventory]=$match[3]
  done

  return 1
}
