#!/usr/bin/env zsh

emulate -L zsh
setopt no_aliases err_exit no_unset extended_glob pipe_fail warn_create_global ksh_arrays

local -r num="(-<0-$((1<<31))>|<0-$((1<<31-1))>)"

local -a mem init
IFS=, read -rA init
[[ -z "${(@)init:#$~num}" ]]
(( ${#init[@]} > 2 ))

local -i p

function at() {
  (( $1 >= 0 && $1 < ${#mem[@]} ))
  unsetopt err_exit
  return ${mem[$1]}
}
functions -M at 1

function store() {
  local -i pos=at(p++)
  (( pos >= 0 && pos < ${#mem[@]} ))
  [[ $1 == $~num ]]
  mem[pos]=$1
}

local -i noun verb
for noun in {99..0}; do
  for verb in {99..0}; do
    p=0
    mem=(${init[@]})
    mem[1,2]=($noun $verb)
    while true; do
      case $(( at(p++) )); in
        99) break;;
        1) store $(( at(at(p++)) + at(at(p++)) ));;
        2) store $(( at(at(p++)) * at(at(p++)) ));;
        *) return 1;;
      esac
    done
    if (( mem[0] == 19690720 )); then
      echo - $((100 * noun + verb))
      return 0
    fi
  done
done

return 1
