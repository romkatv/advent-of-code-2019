#!/usr/bin/env zsh

emulate -L zsh
setopt no_aliases err_exit no_unset extended_glob pipe_fail warn_create_global

local -a grid=(${(f)"$(<&0)"})
(( $#grid > 2 ))
[[ $grid[1] == '#'# ]]
[[ $grid[-1] == '#'# ]]

local -i width=$#grid[1]
local -a pos

() {
  local -i x y
  for y in {1..$#grid}; do
    local line=$grid[y]
    (( $#line == width ))
    [[ $line == '#'*'#' ]]
    for x in {1..$#line}; do
      local c=$line[x]
      local -i idx=0
      case $c in
        [a-z]) idx=$((#c - 97 + 1));;
        [A-Z]) idx=$((#c - 65 + 26 + 1));;
        @) idx=$((26 * 2 + 1));;
        *) [[ $c == [.A-Z#] ]];;
      esac
      if (( idx )); then
        [[ -z ${pos[idx]:-} ]]
        pos[idx]=$(((y - 1) * width + x))
      fi
    done
  done

  local p=($pos)
  (( $#p == 26 * 2 + 1 ))

  grid=${(j::)grid}
}

local -a topology

() {
  local -i xy
  for xy in $pos; do
    local -a adjacent=()
    local -A visited=()
    local -a q1=($xy) q2=()
    local -i dist=0 dxy=0
    for ((dist = 1; $#q1; ++dist)); do
      while (( $#q1 )); do
        local -i r=q1[1]
        shift 1 q1
        for dxy in 1 -1 $width -$width; do
          xy='r + dxy'
          [[ -z ${visited[$xy]:-} ]] || continue
          visited[$xy]=1
          local c=$grid[xy]
          if [[ $c == . ]]; then
            q2+=$xy
            continue
          fi
          [[ $c != '#' ]] || continue
          adjacent+=($pos[(i)$xy] $dist)
        done
      done
      q1=($q2)
      q2=()
    done
    topology+="$adjacent"
  done
}

local -A cache

function solve() {
  local -i keys=$1
  local -i robot=$2
  local cache_key=${(j.:.)*}
  local -i res=${cache[$cache_key]:-0}
  if (( res > 0 || keys == (1 << 27) - 2 )); then
    unsetopt err_exit
    return res
  fi

  local -a key_idx
  local -a key_dist
  local -a visited
  local -a q=("$robot 0")
  local -i idx dist
  visited[robot]=1
  while (( $#q )); do
    local -a p=(${=q[1]})
    shift 1 q
    for idx dist in ${=topology[p[1]]}; do
      [[ -z ${visited[idx]:-} ]] || continue
      visited[idx]=1
      local c=$grid[pos[idx]]
      case $c in
        [A-Z]) (( keys & (1 << (#c - 65 + 1)) )) || continue;;
        [a-z])
          local -i k=$((#c - 97 + 1))
          [[ -z ${key_dist[k]:-} ]] || continue
          if (( !(keys & (1 << k)) )); then
            key_dist[k]=$((dist + p[2]))
            key_idx+=$k
            continue
          fi
        ;;
        @);;
        *) exit 1;;
      esac
      q+="$idx $((dist + p[2]))"
    done
  done

  (( $#key_dist ))

  res=$((1 << 63 - 1))
  local -i i
  for i in $key_idx; do
    local -i d=key_dist[i]
    (( d ))
    (( d += solve(keys | (1 << i), i) ))
    (( res < d )) || res=d
  done

  cache[$cache_key]=$res

  unsetopt err_exit
  return res
}
functions -M solve 2

echo -E - $((solve(0, 26 * 2 + 1)))
